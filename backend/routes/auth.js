const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const User = require('../models/User');

const JWT_SECRET = 'your_jwt_secret_key_here'; // ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
const OTP_STORE = {}; // OTP ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£

// Nodemailer ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'mdashikurrahman50000@gmail.com',
    pass: 'waqvxgfitlmwualm' // Gmail App Password
  }
});

// ‡ßß. OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
router.post('/send-otp', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï' });

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  OTP_STORE[email] = otp;

  try {
    await transporter.sendMail({
      from: '"Acadamy" <mdashikurrahman50000@gmail.com>',
      to: email,
      subject: 'OTP Verification',
      html: `<h3>Your OTP is: ${otp}</h3>`
    });

    res.json({ message: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' });
  } catch (err) {
    console.error('OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü error:', err);
    res.status(500).json({ error: 'OTP ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø' });
  }
});


// ‡ß®. (OTP ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßá)
router.post('/verify-otp', (req, res) => {
  const { email, otp } = req.body;

  if (!email || !otp) {
    return res.status(400).json({ error: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ì OTP ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®' });
  }

  if (OTP_STORE[email] === otp) {
    return res.json({ message: 'OTP ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
  } else {
    return res.status(400).json({ error: '‡¶≠‡ßÅ‡¶≤ OTP' });
  }
});

// 3. ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® (‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ì ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá)
router.post('/register', async (req, res) => {
  const { name, age, phone, email, password } = req.body;

  if (!name || !age || !phone || !email || !password) {
    return res.status(400).json({ error: '‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®' });
  }

  if (phone.length !== 11) {
    return res.status(400).json({ error: '‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡ßß‡ßß ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' });
  }
  if (password.length < 8) {
    return res.status(400).json({ error: '‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßÆ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' });
  }

  try {
    const existingUser = await User.findOne({ $or: [{ phone }, { email }] });
    if (existingUser) {
      return res.status(400).json({ error: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' });
    }

    const newUser = new User({
      name,
      age,
      phone,
      email,
      password,
      yourCourses: [],
      isVerified: true
    });

    await newUser.save();
    delete OTP_STORE[email]; // Optional: ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ OTP ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ, ‡¶è‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

    res.json({ message: '‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' });

  } catch (err) {
    if (err.code === 11000) {
      const field = Object.keys(err.keyPattern)[0];
      return res.status(400).json({ error: `${field} ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá` });
    }

    console.error('‚ùå Registration Error:', err);
    res.status(500).json({ error: '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®' });
  }
});



// 4. ‡¶≤‡¶ó‡¶á‡¶® (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
router.post('/login', async (req, res) => {
  const { phone, password } = req.body;

  if (!phone || phone.length !== 11) {
    return res.status(400).json({ error: '‡¶∏‡¶†‡¶ø‡¶ï ‡ßß‡ßß ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®' });
  }
  if (!password || password.length < 8) {
    return res.status(400).json({ error: '‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶® (‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßÆ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞)' });
  }

  const user = await User.findOne({ phone, password });
  if (!user) {
    return res.status(401).json({ error: '‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°' });
  }

  if (!user.isVerified) {
    return res.status(403).json({ error: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶° ‡¶®‡ßü' });
  }

  const tokenPayload = {
    id: user._id,
    name: user.name,
    phone: user.phone,
    email: user.email,
    age: user.age,
    isVerified: user.isVerified,
    role: user.role,
    yourCourses: user.yourCourses // Optional: Include if needed
    // yourCourses: user.yourCourses // Optional: Include if needed
  };

  const token = jwt.sign(tokenPayload, JWT_SECRET, { expiresIn: '60d' });

  res.json({
    message: '‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá',
    token,
    user: tokenPayload,
    role: user.role // üëâ Add this
  });
});



// OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
router.post('/send-reset-otp', async (req, res) => {
  const { phone } = req.body;
  const user = await User.findOne({ phone });

  if (!user) return res.status(400).json({ error: '‡¶è‡¶á ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶ï‡ßã‡¶® ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á' });

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  OTP_STORE[phone] = { otp, email: user.email };

  // Gmail ‡¶¶‡¶ø‡ßü‡ßá OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
  try {
    await transporter.sendMail({
      to: user.email,
      subject: 'Password Reset OTP',
      html: `<p>Your OTP is: <strong>${otp}</strong></p>`
    });
    res.json({ message: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
  } catch (err) {
    res.status(500).json({ error: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
  }
});

// OTP ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
router.post('/verify-reset-otp', (req, res) => {
  const { phone, otp } = req.body;
  if (OTP_STORE[phone] && OTP_STORE[phone].otp === otp) {
    res.json({ message: 'OTP ‡¶∏‡¶†‡¶ø‡¶ï' });
  } else {
    res.status(400).json({ error: 'OTP ‡¶≠‡ßÅ‡¶≤' });
  }
});

// ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
router.post('/reset-password', async (req, res) => {
  const { phone, newPassword } = req.body;
  const user = await User.findOne({ phone });

  if (!user) return res.status(400).json({ error: '‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' });

  user.password = newPassword;
  await user.save();

  delete OTP_STORE[phone];

  res.json({ message: '‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
});

module.exports = router;
